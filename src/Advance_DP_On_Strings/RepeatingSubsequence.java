package Advance_DP_On_Strings;

//Q=
//        Problem Description
//        Given a string A, find if there is any subsequence that repeats itself.
//
//        A subsequence of a string is defined as a sequence of characters generated by deleting some
//        characters in the string without changing the order of the remaining characters.
//
//        NOTE:
//        1. Subsequence length should be greater than or equal to 2.
//        2. The repeating subsequence should be disjoint that is in both the sequence no character
//        in the same order and position should be taken from the same index of the original string.
//
//
//
//        Problem Constraints
//        1 <= length(A) <= 100
//
//
//
//        Input Format
//        The first and the only argument of input contains a string A.
//
//
//
//        Output Format
//        Return an integer, 1 if there is any subsequence which repeat itself else return 0.
//
//
//
//        Example Input

//        Input 1:
//
//        A = "abab"

//        Input 2:
//
//        A = "abba"
//
//
//        Example Output

//        Output 1:
//
//        1
//        Output 2:
//
//        0
//
//
//        Example Explanation

//        Explanation 1:
//
//        "ab" is repeated.

//        Explanation 2:

//
//        There is no repeating subsequence.

public class RepeatingSubsequence {
    int dp[][];
    int method(String A,String B,int i,int j){
        if(i<0|| j<0){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }

        if(A.charAt(i)==B.charAt(j) && i!=j){
            dp[i][j]=(1+method(A,B,i-1,j-1));
            return (1+method(A,B,i-1,j-1));
        }
        else{
            dp[i][j]=Math.max(method(A,B,i-1,j),method(A,B,i,j-1));
            return Math.max(method(A,B,i-1,j),method(A,B,i,j-1));
        }
    }
    public int anytwo(String A) {
        dp=new int[A.length()][A.length()];
        for(int i=0;i<A.length();i++){
            for(int j=0;j<A.length();j++){
                dp[i][j]=-1;
            }
        }
        if(method(A,A,A.length()-1,A.length()-1)>1){
            return 1;
        }
        return 0;
    }
    public static void main(String[] args) {
        RepeatingSubsequence I = new RepeatingSubsequence();

        System.out.println( I.anytwo("abbcdgf"));
    }
}


